<?php
/**

  Example from other works, where I needed to introduce Promise for PHP



 * The MIT License (MIT)
 * Copyright (c) 2014 PulzAir Project
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
 
namespace pulzair\core;

class Deferred implements \pulzair\core\interfaces\IDeferred
{
    public function success(callable $func, $override = false)
    {
        if($this->fired):
            $this->_invoke($func);
        else:
            if($override):
                $this->callbacks = array();
            endif;
            $this->callbacks[] = $func;
        endif;
    }
    
    public function failure(callable $func, $override = false)
    {
        if($this->fired):
            $this->_invoke($func);
        else:
            if($override):
                $this->errbacks = array();
            endif;
            $this->errbacks[] = $func;
        endif;
    }
    
    public function both(callable $func, $override = false)
    {
        $this->success($func, $override);
        $this->failure($func, $override);
    }
    
    public function resolve($value)
    {
        if($this->fired):
            return $this->value;
        else:
            $this->value = $value;
            $this->fired = true;
            while($func = array_shift($this->callbacks)):
                $this->_invoke($func);
            endwhile;
            return $this->value;                
        endif;
    }
    
    public function reject($value)
    {
        if($this->fired):
            return $this->value;
        else:
            $this->value = $value;
            $this->fired = true;
            while($func = array_shift($this->errbacks)):
                $this->_invoke($func);
            endwhile;
            return $this->value;                
        endif;
    }
    
    private function _invoke(callable $func)
    {
        $this->value = $func($this->value);
    }
    
    private $fired = false;
    private $value = null;
    private $callbacks = array();
    private $errbacks = array();
}
